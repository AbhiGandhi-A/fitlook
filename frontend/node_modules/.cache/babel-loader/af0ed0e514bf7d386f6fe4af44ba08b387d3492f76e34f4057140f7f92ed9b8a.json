{"ast":null,"code":"// This engine now removes product backgrounds, detects user body regions, and composites clothing realistically\n\nclass VirtualTryOnEngine {\n  constructor(canvas, userProfile) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.userProfile = userProfile;\n    this.baseImage = null;\n    this.baseImageData = null;\n    this.bodyRegions = null;\n    this.clothingLayers = [];\n  }\n\n  // Load base image and detect body regions using advanced image analysis\n  async loadBaseImage(imageUrl) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        // Set canvas size to match image\n        this.canvas.width = img.width;\n        this.canvas.height = img.height;\n\n        // Draw base image\n        this.ctx.drawImage(img, 0, 0);\n        this.baseImage = img;\n\n        // Store base image data for reference\n        this.baseImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n\n        // Detect body regions using advanced analysis\n        this.detectBodyRegionsAdvanced();\n        console.log(\"[FitLook] Base image loaded and body regions detected\");\n        resolve();\n      };\n      img.onerror = () => {\n        reject(new Error(\"Failed to load base image\"));\n      };\n      img.src = imageUrl;\n    });\n  }\n\n  // Advanced body region detection using color and edge analysis\n  detectBodyRegionsAdvanced() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const imageData = this.baseImageData;\n    const data = imageData.data;\n\n    // Find skin tone regions to detect body parts\n    const skinPixels = this.findSkinToneRegions(data, width, height);\n\n    // Calculate body bounding box\n    let minY = height,\n      maxY = 0,\n      minX = width,\n      maxX = 0;\n    for (let i = 0; i < skinPixels.length; i++) {\n      const pixel = skinPixels[i];\n      minY = Math.min(minY, pixel.y);\n      maxY = Math.max(maxY, pixel.y);\n      minX = Math.min(minX, pixel.x);\n      maxX = Math.max(maxX, pixel.x);\n    }\n    const bodyHeight = maxY - minY;\n    const bodyWidth = maxX - minX;\n\n    // Define body regions based on detected body position\n    this.bodyRegions = {\n      head: {\n        x: minX,\n        y: minY,\n        width: bodyWidth,\n        height: bodyHeight * 0.15\n      },\n      torso: {\n        x: minX + bodyWidth * 0.1,\n        y: minY + bodyHeight * 0.15,\n        width: bodyWidth * 0.8,\n        height: bodyHeight * 0.35\n      },\n      waist: {\n        x: minX + bodyWidth * 0.05,\n        y: minY + bodyHeight * 0.5,\n        width: bodyWidth * 0.9,\n        height: bodyHeight * 0.05\n      },\n      legs: {\n        x: minX + bodyWidth * 0.1,\n        y: minY + bodyHeight * 0.55,\n        width: bodyWidth * 0.8,\n        height: bodyHeight * 0.3\n      },\n      feet: {\n        x: minX + bodyWidth * 0.15,\n        y: minY + bodyHeight * 0.85,\n        width: bodyWidth * 0.7,\n        height: bodyHeight * 0.15\n      }\n    };\n    console.log(\"[FitLook] Body regions detected:\", this.bodyRegions);\n  }\n\n  // Find skin tone regions in the image\n  findSkinToneRegions(data, width, height) {\n    const skinPixels = [];\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      // Skin tone detection (adjust ranges based on actual skin tones)\n      if (this.isSkinTone(r, g, b) && a > 200) {\n        const pixelIndex = i / 4;\n        const y = Math.floor(pixelIndex / width);\n        const x = pixelIndex % width;\n        skinPixels.push({\n          x,\n          y\n        });\n      }\n    }\n    return skinPixels;\n  }\n\n  // Check if a pixel is likely skin tone\n  isSkinTone(r, g, b) {\n    // Skin tone ranges (can be adjusted for different skin tones)\n    const rRange = r > 95 && r < 220;\n    const gRange = g > 40 && g < 200;\n    const bRange = b > 20 && b < 170;\n\n    // Additional checks for skin tone\n    const rGreaterG = r > g;\n    const rGreaterB = r > b;\n    const gGreaterB = g > b;\n    return rRange && gRange && bRange && rGreaterG && rGreaterB && gGreaterB;\n  }\n\n  // Remove white/light background from product image\n  async removeProductBackground(imageUrl) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        // Create temporary canvas for processing\n        const tempCanvas = document.createElement(\"canvas\");\n        tempCanvas.width = img.width;\n        tempCanvas.height = img.height;\n        const tempCtx = tempCanvas.getContext(\"2d\");\n\n        // Draw image\n        tempCtx.drawImage(img, 0, 0);\n\n        // Get image data\n        const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n        const data = imageData.data;\n\n        // Remove white/light background\n        for (let i = 0; i < data.length; i += 4) {\n          const r = data[i];\n          const g = data[i + 1];\n          const b = data[i + 2];\n          const a = data[i + 3];\n\n          // If pixel is very light (white/light gray background), make it transparent\n          if (r > 240 && g > 240 && b > 240) {\n            data[i + 3] = 0; // Set alpha to 0 (transparent)\n          }\n          // Also handle slightly off-white backgrounds\n          else if (r > 220 && g > 220 && b > 220 && a > 200) {\n            data[i + 3] = Math.max(0, a - 100);\n          }\n        }\n\n        // Put processed image data back\n        tempCtx.putImageData(imageData, 0, 0);\n\n        // Convert to data URL\n        const processedImageUrl = tempCanvas.toDataURL(\"image/png\");\n        resolve(processedImageUrl);\n      };\n      img.onerror = () => {\n        reject(new Error(\"Failed to load product image for background removal\"));\n      };\n      img.src = imageUrl;\n    });\n  }\n\n  // Apply clothing item with background removal and proper positioning\n  async applyClothing(item, category) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = async () => {\n        try {\n          // Remove background from product image\n          const processedImageUrl = await this.removeProductBackground(img.src);\n\n          // Load processed image\n          const processedImg = new Image();\n          processedImg.crossOrigin = \"anonymous\";\n          processedImg.onload = () => {\n            try {\n              const region = this.getRegionForCategory(category);\n\n              // Calculate scaling to fit the region\n              const scale = Math.min(region.width / processedImg.width, region.height / processedImg.height);\n              const scaledWidth = processedImg.width * scale;\n              const scaledHeight = processedImg.height * scale;\n\n              // Center the clothing in the region\n              const x = region.x + (region.width - scaledWidth) / 2;\n              const y = region.y + (region.height - scaledHeight) / 2;\n\n              // Draw clothing with proper blending\n              this.ctx.globalAlpha = 0.95;\n              this.ctx.globalCompositeOperation = \"source-over\";\n              this.ctx.drawImage(processedImg, x, y, scaledWidth, scaledHeight);\n              this.ctx.globalAlpha = 1;\n              this.ctx.globalCompositeOperation = \"source-over\";\n\n              // Store clothing layer info\n              this.clothingLayers.push({\n                category,\n                item,\n                x,\n                y,\n                width: scaledWidth,\n                height: scaledHeight\n              });\n              console.log(`[FitLook] Applied ${category}: ${item.title}`);\n              resolve();\n            } catch (error) {\n              reject(error);\n            }\n          };\n          processedImg.onerror = () => {\n            reject(new Error(`Failed to load processed ${category} image`));\n          };\n          processedImg.src = processedImageUrl;\n        } catch (error) {\n          reject(error);\n        }\n      };\n      img.onerror = () => {\n        reject(new Error(`Failed to load ${category} image`));\n      };\n      img.src = item.image;\n    });\n  }\n\n  // Get body region for clothing category\n  getRegionForCategory(category) {\n    const regions = this.bodyRegions;\n    switch (category) {\n      case \"top\":\n        // Torso region for shirts, tops, jackets\n        return {\n          x: regions.torso.x,\n          y: regions.torso.y,\n          width: regions.torso.width,\n          height: regions.torso.height\n        };\n      case \"bottom\":\n        // Legs and waist region for pants, jeans, skirts\n        return {\n          x: regions.legs.x,\n          y: regions.waist.y,\n          width: regions.legs.width,\n          height: regions.legs.height + regions.waist.height\n        };\n      case \"shoes\":\n        // Feet region for shoes\n        return {\n          x: regions.feet.x,\n          y: regions.feet.y,\n          width: regions.feet.width,\n          height: regions.feet.height\n        };\n      case \"accessory\":\n        // Wrist/arm area for accessories\n        return {\n          x: regions.torso.x + regions.torso.width * 0.65,\n          y: regions.torso.y + regions.torso.height * 0.75,\n          width: regions.torso.width * 0.3,\n          height: regions.torso.height * 0.25\n        };\n      default:\n        return regions.torso;\n    }\n  }\n\n  // Clear canvas and redraw base image\n  resetCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.baseImage) {\n      this.ctx.drawImage(this.baseImage, 0, 0);\n    }\n    this.clothingLayers = [];\n  }\n\n  // Export canvas as image\n  exportOutfit() {\n    return this.canvas.toDataURL(\"image/png\");\n  }\n}\nexport default VirtualTryOnEngine;","map":{"version":3,"names":["VirtualTryOnEngine","constructor","canvas","userProfile","ctx","getContext","baseImage","baseImageData","bodyRegions","clothingLayers","loadBaseImage","imageUrl","Promise","resolve","reject","img","Image","crossOrigin","onload","width","height","drawImage","getImageData","detectBodyRegionsAdvanced","console","log","onerror","Error","src","imageData","data","skinPixels","findSkinToneRegions","minY","maxY","minX","maxX","i","length","pixel","Math","min","y","max","x","bodyHeight","bodyWidth","head","torso","waist","legs","feet","r","g","b","a","isSkinTone","pixelIndex","floor","push","rRange","gRange","bRange","rGreaterG","rGreaterB","gGreaterB","removeProductBackground","tempCanvas","document","createElement","tempCtx","putImageData","processedImageUrl","toDataURL","applyClothing","item","category","processedImg","region","getRegionForCategory","scale","scaledWidth","scaledHeight","globalAlpha","globalCompositeOperation","title","error","image","regions","resetCanvas","clearRect","exportOutfit"],"sources":["C:/Users/abhig/Downloads/fitlook-app/frontend/src/utils/VirtualTryOnEngine.js"],"sourcesContent":["// This engine now removes product backgrounds, detects user body regions, and composites clothing realistically\r\n\r\nclass VirtualTryOnEngine {\r\n  constructor(canvas, userProfile) {\r\n    this.canvas = canvas\r\n    this.ctx = canvas.getContext(\"2d\")\r\n    this.userProfile = userProfile\r\n    this.baseImage = null\r\n    this.baseImageData = null\r\n    this.bodyRegions = null\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Load base image and detect body regions using advanced image analysis\r\n  async loadBaseImage(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        // Set canvas size to match image\r\n        this.canvas.width = img.width\r\n        this.canvas.height = img.height\r\n\r\n        // Draw base image\r\n        this.ctx.drawImage(img, 0, 0)\r\n        this.baseImage = img\r\n\r\n        // Store base image data for reference\r\n        this.baseImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        // Detect body regions using advanced analysis\r\n        this.detectBodyRegionsAdvanced()\r\n\r\n        console.log(\"[FitLook] Base image loaded and body regions detected\")\r\n        resolve()\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(\"Failed to load base image\"))\r\n      }\r\n\r\n      img.src = imageUrl\r\n    })\r\n  }\r\n\r\n  // Advanced body region detection using color and edge analysis\r\n  detectBodyRegionsAdvanced() {\r\n    const width = this.canvas.width\r\n    const height = this.canvas.height\r\n    const imageData = this.baseImageData\r\n    const data = imageData.data\r\n\r\n    // Find skin tone regions to detect body parts\r\n    const skinPixels = this.findSkinToneRegions(data, width, height)\r\n\r\n    // Calculate body bounding box\r\n    let minY = height,\r\n      maxY = 0,\r\n      minX = width,\r\n      maxX = 0\r\n\r\n    for (let i = 0; i < skinPixels.length; i++) {\r\n      const pixel = skinPixels[i]\r\n      minY = Math.min(minY, pixel.y)\r\n      maxY = Math.max(maxY, pixel.y)\r\n      minX = Math.min(minX, pixel.x)\r\n      maxX = Math.max(maxX, pixel.x)\r\n    }\r\n\r\n    const bodyHeight = maxY - minY\r\n    const bodyWidth = maxX - minX\r\n\r\n    // Define body regions based on detected body position\r\n    this.bodyRegions = {\r\n      head: {\r\n        x: minX,\r\n        y: minY,\r\n        width: bodyWidth,\r\n        height: bodyHeight * 0.15,\r\n      },\r\n      torso: {\r\n        x: minX + bodyWidth * 0.1,\r\n        y: minY + bodyHeight * 0.15,\r\n        width: bodyWidth * 0.8,\r\n        height: bodyHeight * 0.35,\r\n      },\r\n      waist: {\r\n        x: minX + bodyWidth * 0.05,\r\n        y: minY + bodyHeight * 0.5,\r\n        width: bodyWidth * 0.9,\r\n        height: bodyHeight * 0.05,\r\n      },\r\n      legs: {\r\n        x: minX + bodyWidth * 0.1,\r\n        y: minY + bodyHeight * 0.55,\r\n        width: bodyWidth * 0.8,\r\n        height: bodyHeight * 0.3,\r\n      },\r\n      feet: {\r\n        x: minX + bodyWidth * 0.15,\r\n        y: minY + bodyHeight * 0.85,\r\n        width: bodyWidth * 0.7,\r\n        height: bodyHeight * 0.15,\r\n      },\r\n    }\r\n\r\n    console.log(\"[FitLook] Body regions detected:\", this.bodyRegions)\r\n  }\r\n\r\n  // Find skin tone regions in the image\r\n  findSkinToneRegions(data, width, height) {\r\n    const skinPixels = []\r\n\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      const r = data[i]\r\n      const g = data[i + 1]\r\n      const b = data[i + 2]\r\n      const a = data[i + 3]\r\n\r\n      // Skin tone detection (adjust ranges based on actual skin tones)\r\n      if (this.isSkinTone(r, g, b) && a > 200) {\r\n        const pixelIndex = i / 4\r\n        const y = Math.floor(pixelIndex / width)\r\n        const x = pixelIndex % width\r\n        skinPixels.push({ x, y })\r\n      }\r\n    }\r\n\r\n    return skinPixels\r\n  }\r\n\r\n  // Check if a pixel is likely skin tone\r\n  isSkinTone(r, g, b) {\r\n    // Skin tone ranges (can be adjusted for different skin tones)\r\n    const rRange = r > 95 && r < 220\r\n    const gRange = g > 40 && g < 200\r\n    const bRange = b > 20 && b < 170\r\n\r\n    // Additional checks for skin tone\r\n    const rGreaterG = r > g\r\n    const rGreaterB = r > b\r\n    const gGreaterB = g > b\r\n\r\n    return rRange && gRange && bRange && rGreaterG && rGreaterB && gGreaterB\r\n  }\r\n\r\n  // Remove white/light background from product image\r\n  async removeProductBackground(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        // Create temporary canvas for processing\r\n        const tempCanvas = document.createElement(\"canvas\")\r\n        tempCanvas.width = img.width\r\n        tempCanvas.height = img.height\r\n        const tempCtx = tempCanvas.getContext(\"2d\")\r\n\r\n        // Draw image\r\n        tempCtx.drawImage(img, 0, 0)\r\n\r\n        // Get image data\r\n        const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height)\r\n        const data = imageData.data\r\n\r\n        // Remove white/light background\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          const r = data[i]\r\n          const g = data[i + 1]\r\n          const b = data[i + 2]\r\n          const a = data[i + 3]\r\n\r\n          // If pixel is very light (white/light gray background), make it transparent\r\n          if (r > 240 && g > 240 && b > 240) {\r\n            data[i + 3] = 0 // Set alpha to 0 (transparent)\r\n          }\r\n          // Also handle slightly off-white backgrounds\r\n          else if (r > 220 && g > 220 && b > 220 && a > 200) {\r\n            data[i + 3] = Math.max(0, a - 100)\r\n          }\r\n        }\r\n\r\n        // Put processed image data back\r\n        tempCtx.putImageData(imageData, 0, 0)\r\n\r\n        // Convert to data URL\r\n        const processedImageUrl = tempCanvas.toDataURL(\"image/png\")\r\n        resolve(processedImageUrl)\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(\"Failed to load product image for background removal\"))\r\n      }\r\n\r\n      img.src = imageUrl\r\n    })\r\n  }\r\n\r\n  // Apply clothing item with background removal and proper positioning\r\n  async applyClothing(item, category) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = async () => {\r\n        try {\r\n          // Remove background from product image\r\n          const processedImageUrl = await this.removeProductBackground(img.src)\r\n\r\n          // Load processed image\r\n          const processedImg = new Image()\r\n          processedImg.crossOrigin = \"anonymous\"\r\n\r\n          processedImg.onload = () => {\r\n            try {\r\n              const region = this.getRegionForCategory(category)\r\n\r\n              // Calculate scaling to fit the region\r\n              const scale = Math.min(region.width / processedImg.width, region.height / processedImg.height)\r\n\r\n              const scaledWidth = processedImg.width * scale\r\n              const scaledHeight = processedImg.height * scale\r\n\r\n              // Center the clothing in the region\r\n              const x = region.x + (region.width - scaledWidth) / 2\r\n              const y = region.y + (region.height - scaledHeight) / 2\r\n\r\n              // Draw clothing with proper blending\r\n              this.ctx.globalAlpha = 0.95\r\n              this.ctx.globalCompositeOperation = \"source-over\"\r\n              this.ctx.drawImage(processedImg, x, y, scaledWidth, scaledHeight)\r\n              this.ctx.globalAlpha = 1\r\n              this.ctx.globalCompositeOperation = \"source-over\"\r\n\r\n              // Store clothing layer info\r\n              this.clothingLayers.push({\r\n                category,\r\n                item,\r\n                x,\r\n                y,\r\n                width: scaledWidth,\r\n                height: scaledHeight,\r\n              })\r\n\r\n              console.log(`[FitLook] Applied ${category}: ${item.title}`)\r\n              resolve()\r\n            } catch (error) {\r\n              reject(error)\r\n            }\r\n          }\r\n\r\n          processedImg.onerror = () => {\r\n            reject(new Error(`Failed to load processed ${category} image`))\r\n          }\r\n\r\n          processedImg.src = processedImageUrl\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(`Failed to load ${category} image`))\r\n      }\r\n\r\n      img.src = item.image\r\n    })\r\n  }\r\n\r\n  // Get body region for clothing category\r\n  getRegionForCategory(category) {\r\n    const regions = this.bodyRegions\r\n\r\n    switch (category) {\r\n      case \"top\":\r\n        // Torso region for shirts, tops, jackets\r\n        return {\r\n          x: regions.torso.x,\r\n          y: regions.torso.y,\r\n          width: regions.torso.width,\r\n          height: regions.torso.height,\r\n        }\r\n      case \"bottom\":\r\n        // Legs and waist region for pants, jeans, skirts\r\n        return {\r\n          x: regions.legs.x,\r\n          y: regions.waist.y,\r\n          width: regions.legs.width,\r\n          height: regions.legs.height + regions.waist.height,\r\n        }\r\n      case \"shoes\":\r\n        // Feet region for shoes\r\n        return {\r\n          x: regions.feet.x,\r\n          y: regions.feet.y,\r\n          width: regions.feet.width,\r\n          height: regions.feet.height,\r\n        }\r\n      case \"accessory\":\r\n        // Wrist/arm area for accessories\r\n        return {\r\n          x: regions.torso.x + regions.torso.width * 0.65,\r\n          y: regions.torso.y + regions.torso.height * 0.75,\r\n          width: regions.torso.width * 0.3,\r\n          height: regions.torso.height * 0.25,\r\n        }\r\n      default:\r\n        return regions.torso\r\n    }\r\n  }\r\n\r\n  // Clear canvas and redraw base image\r\n  resetCanvas() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n    if (this.baseImage) {\r\n      this.ctx.drawImage(this.baseImage, 0, 0)\r\n    }\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Export canvas as image\r\n  exportOutfit() {\r\n    return this.canvas.toDataURL(\"image/png\")\r\n  }\r\n}\r\n\r\nexport default VirtualTryOnEngine\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
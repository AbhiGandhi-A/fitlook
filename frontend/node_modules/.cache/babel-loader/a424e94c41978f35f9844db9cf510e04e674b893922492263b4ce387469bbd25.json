{"ast":null,"code":"// This engine now removes product backgrounds, detects user body regions, and composites clothing realistically\nclass VirtualTryOnEngine{constructor(canvas,userProfile){this.canvas=canvas;this.ctx=canvas.getContext(\"2d\");this.userProfile=userProfile;this.baseImage=null;this.baseImageData=null;this.bodyRegions=null;this.clothingLayers=[];}// Load base image and detect body regions using advanced image analysis\nasync loadBaseImage(imageUrl){return new Promise((resolve,reject)=>{const img=new Image();img.crossOrigin=\"anonymous\";img.onload=()=>{// Set canvas size to match image\nthis.canvas.width=img.width;this.canvas.height=img.height;// Draw base image\nthis.ctx.drawImage(img,0,0);this.baseImage=img;// Store base image data for reference\nthis.baseImageData=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);// Detect body regions using advanced analysis\nthis.detectBodyRegionsAdvanced();console.log(\"[FitLook] Base image loaded and body regions detected\");resolve();};img.onerror=()=>{reject(new Error(\"Failed to load base image\"));};img.src=imageUrl;});}// Advanced body region detection using color and edge analysis\ndetectBodyRegionsAdvanced(){const width=this.canvas.width;const height=this.canvas.height;const imageData=this.baseImageData;const data=imageData.data;// Find skin tone regions to detect body parts\nconst skinPixels=this.findSkinToneRegions(data,width,height);// Calculate body bounding box\nlet minY=height,maxY=0,minX=width,maxX=0;for(let i=0;i<skinPixels.length;i++){const pixel=skinPixels[i];minY=Math.min(minY,pixel.y);maxY=Math.max(maxY,pixel.y);minX=Math.min(minX,pixel.x);maxX=Math.max(maxX,pixel.x);}const bodyHeight=maxY-minY;const bodyWidth=maxX-minX;// Define body regions based on detected body position\nthis.bodyRegions={head:{x:minX,y:minY,width:bodyWidth,height:bodyHeight*0.15},torso:{x:minX+bodyWidth*0.1,y:minY+bodyHeight*0.15,width:bodyWidth*0.8,height:bodyHeight*0.35},waist:{x:minX+bodyWidth*0.05,y:minY+bodyHeight*0.5,width:bodyWidth*0.9,height:bodyHeight*0.05},legs:{x:minX+bodyWidth*0.1,y:minY+bodyHeight*0.55,width:bodyWidth*0.8,height:bodyHeight*0.3},feet:{x:minX+bodyWidth*0.15,y:minY+bodyHeight*0.85,width:bodyWidth*0.7,height:bodyHeight*0.15}};console.log(\"[FitLook] Body regions detected:\",this.bodyRegions);}// Find skin tone regions in the image\nfindSkinToneRegions(data,width,height){const skinPixels=[];for(let i=0;i<data.length;i+=4){const r=data[i];const g=data[i+1];const b=data[i+2];const a=data[i+3];// Skin tone detection (adjust ranges based on actual skin tones)\nif(this.isSkinTone(r,g,b)&&a>200){const pixelIndex=i/4;const y=Math.floor(pixelIndex/width);const x=pixelIndex%width;skinPixels.push({x,y});}}return skinPixels;}// Check if a pixel is likely skin tone\nisSkinTone(r,g,b){// Skin tone ranges (can be adjusted for different skin tones)\nconst rRange=r>95&&r<220;const gRange=g>40&&g<200;const bRange=b>20&&b<170;// Additional checks for skin tone\nconst rGreaterG=r>g;const rGreaterB=r>b;const gGreaterB=g>b;return rRange&&gRange&&bRange&&rGreaterG&&rGreaterB&&gGreaterB;}// Remove white/light background from product image\nasync removeProductBackground(imageUrl){return new Promise((resolve,reject)=>{const img=new Image();img.crossOrigin=\"anonymous\";img.onload=()=>{// Create temporary canvas for processing\nconst tempCanvas=document.createElement(\"canvas\");tempCanvas.width=img.width;tempCanvas.height=img.height;const tempCtx=tempCanvas.getContext(\"2d\");// Draw image\ntempCtx.drawImage(img,0,0);// Get image data\nconst imageData=tempCtx.getImageData(0,0,tempCanvas.width,tempCanvas.height);const data=imageData.data;// Remove white/light background\nfor(let i=0;i<data.length;i+=4){const r=data[i];const g=data[i+1];const b=data[i+2];const a=data[i+3];// If pixel is very light (white/light gray background), make it transparent\nif(r>240&&g>240&&b>240){data[i+3]=0;// Set alpha to 0 (transparent)\n}// Also handle slightly off-white backgrounds\nelse if(r>220&&g>220&&b>220&&a>200){data[i+3]=Math.max(0,a-100);}}// Put processed image data back\ntempCtx.putImageData(imageData,0,0);// Convert to data URL\nconst processedImageUrl=tempCanvas.toDataURL(\"image/png\");resolve(processedImageUrl);};img.onerror=()=>{reject(new Error(\"Failed to load product image for background removal\"));};img.src=imageUrl;});}// Apply clothing item with background removal and proper positioning\nasync applyClothing(item,category){return new Promise((resolve,reject)=>{const img=new Image();img.crossOrigin=\"anonymous\";img.onload=async()=>{try{// Remove background from product image\nconst processedImageUrl=await this.removeProductBackground(img.src);// Load processed image\nconst processedImg=new Image();processedImg.crossOrigin=\"anonymous\";processedImg.onload=()=>{try{const region=this.getRegionForCategory(category);// Calculate scaling to fit the region\nconst scale=Math.min(region.width/processedImg.width,region.height/processedImg.height);const scaledWidth=processedImg.width*scale;const scaledHeight=processedImg.height*scale;// Center the clothing in the region\nconst x=region.x+(region.width-scaledWidth)/2;const y=region.y+(region.height-scaledHeight)/2;// Draw clothing with proper blending\nthis.ctx.globalAlpha=0.95;this.ctx.globalCompositeOperation=\"source-over\";this.ctx.drawImage(processedImg,x,y,scaledWidth,scaledHeight);this.ctx.globalAlpha=1;this.ctx.globalCompositeOperation=\"source-over\";// Store clothing layer info\nthis.clothingLayers.push({category,item,x,y,width:scaledWidth,height:scaledHeight});console.log(\"[FitLook] Applied \".concat(category,\": \").concat(item.title));resolve();}catch(error){reject(error);}};processedImg.onerror=()=>{reject(new Error(\"Failed to load processed \".concat(category,\" image\")));};processedImg.src=processedImageUrl;}catch(error){reject(error);}};img.onerror=()=>{reject(new Error(\"Failed to load \".concat(category,\" image\")));};img.src=item.image;});}// Get body region for clothing category\ngetRegionForCategory(category){const regions=this.bodyRegions;switch(category){case\"top\":// Torso region for shirts, tops, jackets\nreturn{x:regions.torso.x,y:regions.torso.y,width:regions.torso.width,height:regions.torso.height};case\"bottom\":// Legs and waist region for pants, jeans, skirts\nreturn{x:regions.legs.x,y:regions.waist.y,width:regions.legs.width,height:regions.legs.height+regions.waist.height};case\"shoes\":// Feet region for shoes\nreturn{x:regions.feet.x,y:regions.feet.y,width:regions.feet.width,height:regions.feet.height};case\"accessory\":// Wrist/arm area for accessories\nreturn{x:regions.torso.x+regions.torso.width*0.65,y:regions.torso.y+regions.torso.height*0.75,width:regions.torso.width*0.3,height:regions.torso.height*0.25};default:return regions.torso;}}// Clear canvas and redraw base image\nresetCanvas(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);if(this.baseImage){this.ctx.drawImage(this.baseImage,0,0);}this.clothingLayers=[];}// Export canvas as image\nexportOutfit(){return this.canvas.toDataURL(\"image/png\");}}export default VirtualTryOnEngine;","map":{"version":3,"names":["VirtualTryOnEngine","constructor","canvas","userProfile","ctx","getContext","baseImage","baseImageData","bodyRegions","clothingLayers","loadBaseImage","imageUrl","Promise","resolve","reject","img","Image","crossOrigin","onload","width","height","drawImage","getImageData","detectBodyRegionsAdvanced","console","log","onerror","Error","src","imageData","data","skinPixels","findSkinToneRegions","minY","maxY","minX","maxX","i","length","pixel","Math","min","y","max","x","bodyHeight","bodyWidth","head","torso","waist","legs","feet","r","g","b","a","isSkinTone","pixelIndex","floor","push","rRange","gRange","bRange","rGreaterG","rGreaterB","gGreaterB","removeProductBackground","tempCanvas","document","createElement","tempCtx","putImageData","processedImageUrl","toDataURL","applyClothing","item","category","processedImg","region","getRegionForCategory","scale","scaledWidth","scaledHeight","globalAlpha","globalCompositeOperation","concat","title","error","image","regions","resetCanvas","clearRect","exportOutfit"],"sources":["C:/Users/abhig/Downloads/fitlook-app/frontend/src/utils/VirtualTryOnEngine.js"],"sourcesContent":["// This engine now removes product backgrounds, detects user body regions, and composites clothing realistically\r\n\r\nclass VirtualTryOnEngine {\r\n  constructor(canvas, userProfile) {\r\n    this.canvas = canvas\r\n    this.ctx = canvas.getContext(\"2d\")\r\n    this.userProfile = userProfile\r\n    this.baseImage = null\r\n    this.baseImageData = null\r\n    this.bodyRegions = null\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Load base image and detect body regions using advanced image analysis\r\n  async loadBaseImage(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        // Set canvas size to match image\r\n        this.canvas.width = img.width\r\n        this.canvas.height = img.height\r\n\r\n        // Draw base image\r\n        this.ctx.drawImage(img, 0, 0)\r\n        this.baseImage = img\r\n\r\n        // Store base image data for reference\r\n        this.baseImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        // Detect body regions using advanced analysis\r\n        this.detectBodyRegionsAdvanced()\r\n\r\n        console.log(\"[FitLook] Base image loaded and body regions detected\")\r\n        resolve()\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(\"Failed to load base image\"))\r\n      }\r\n\r\n      img.src = imageUrl\r\n    })\r\n  }\r\n\r\n  // Advanced body region detection using color and edge analysis\r\n  detectBodyRegionsAdvanced() {\r\n    const width = this.canvas.width\r\n    const height = this.canvas.height\r\n    const imageData = this.baseImageData\r\n    const data = imageData.data\r\n\r\n    // Find skin tone regions to detect body parts\r\n    const skinPixels = this.findSkinToneRegions(data, width, height)\r\n\r\n    // Calculate body bounding box\r\n    let minY = height,\r\n      maxY = 0,\r\n      minX = width,\r\n      maxX = 0\r\n\r\n    for (let i = 0; i < skinPixels.length; i++) {\r\n      const pixel = skinPixels[i]\r\n      minY = Math.min(minY, pixel.y)\r\n      maxY = Math.max(maxY, pixel.y)\r\n      minX = Math.min(minX, pixel.x)\r\n      maxX = Math.max(maxX, pixel.x)\r\n    }\r\n\r\n    const bodyHeight = maxY - minY\r\n    const bodyWidth = maxX - minX\r\n\r\n    // Define body regions based on detected body position\r\n    this.bodyRegions = {\r\n      head: {\r\n        x: minX,\r\n        y: minY,\r\n        width: bodyWidth,\r\n        height: bodyHeight * 0.15,\r\n      },\r\n      torso: {\r\n        x: minX + bodyWidth * 0.1,\r\n        y: minY + bodyHeight * 0.15,\r\n        width: bodyWidth * 0.8,\r\n        height: bodyHeight * 0.35,\r\n      },\r\n      waist: {\r\n        x: minX + bodyWidth * 0.05,\r\n        y: minY + bodyHeight * 0.5,\r\n        width: bodyWidth * 0.9,\r\n        height: bodyHeight * 0.05,\r\n      },\r\n      legs: {\r\n        x: minX + bodyWidth * 0.1,\r\n        y: minY + bodyHeight * 0.55,\r\n        width: bodyWidth * 0.8,\r\n        height: bodyHeight * 0.3,\r\n      },\r\n      feet: {\r\n        x: minX + bodyWidth * 0.15,\r\n        y: minY + bodyHeight * 0.85,\r\n        width: bodyWidth * 0.7,\r\n        height: bodyHeight * 0.15,\r\n      },\r\n    }\r\n\r\n    console.log(\"[FitLook] Body regions detected:\", this.bodyRegions)\r\n  }\r\n\r\n  // Find skin tone regions in the image\r\n  findSkinToneRegions(data, width, height) {\r\n    const skinPixels = []\r\n\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      const r = data[i]\r\n      const g = data[i + 1]\r\n      const b = data[i + 2]\r\n      const a = data[i + 3]\r\n\r\n      // Skin tone detection (adjust ranges based on actual skin tones)\r\n      if (this.isSkinTone(r, g, b) && a > 200) {\r\n        const pixelIndex = i / 4\r\n        const y = Math.floor(pixelIndex / width)\r\n        const x = pixelIndex % width\r\n        skinPixels.push({ x, y })\r\n      }\r\n    }\r\n\r\n    return skinPixels\r\n  }\r\n\r\n  // Check if a pixel is likely skin tone\r\n  isSkinTone(r, g, b) {\r\n    // Skin tone ranges (can be adjusted for different skin tones)\r\n    const rRange = r > 95 && r < 220\r\n    const gRange = g > 40 && g < 200\r\n    const bRange = b > 20 && b < 170\r\n\r\n    // Additional checks for skin tone\r\n    const rGreaterG = r > g\r\n    const rGreaterB = r > b\r\n    const gGreaterB = g > b\r\n\r\n    return rRange && gRange && bRange && rGreaterG && rGreaterB && gGreaterB\r\n  }\r\n\r\n  // Remove white/light background from product image\r\n  async removeProductBackground(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        // Create temporary canvas for processing\r\n        const tempCanvas = document.createElement(\"canvas\")\r\n        tempCanvas.width = img.width\r\n        tempCanvas.height = img.height\r\n        const tempCtx = tempCanvas.getContext(\"2d\")\r\n\r\n        // Draw image\r\n        tempCtx.drawImage(img, 0, 0)\r\n\r\n        // Get image data\r\n        const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height)\r\n        const data = imageData.data\r\n\r\n        // Remove white/light background\r\n        for (let i = 0; i < data.length; i += 4) {\r\n          const r = data[i]\r\n          const g = data[i + 1]\r\n          const b = data[i + 2]\r\n          const a = data[i + 3]\r\n\r\n          // If pixel is very light (white/light gray background), make it transparent\r\n          if (r > 240 && g > 240 && b > 240) {\r\n            data[i + 3] = 0 // Set alpha to 0 (transparent)\r\n          }\r\n          // Also handle slightly off-white backgrounds\r\n          else if (r > 220 && g > 220 && b > 220 && a > 200) {\r\n            data[i + 3] = Math.max(0, a - 100)\r\n          }\r\n        }\r\n\r\n        // Put processed image data back\r\n        tempCtx.putImageData(imageData, 0, 0)\r\n\r\n        // Convert to data URL\r\n        const processedImageUrl = tempCanvas.toDataURL(\"image/png\")\r\n        resolve(processedImageUrl)\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(\"Failed to load product image for background removal\"))\r\n      }\r\n\r\n      img.src = imageUrl\r\n    })\r\n  }\r\n\r\n  // Apply clothing item with background removal and proper positioning\r\n  async applyClothing(item, category) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = async () => {\r\n        try {\r\n          // Remove background from product image\r\n          const processedImageUrl = await this.removeProductBackground(img.src)\r\n\r\n          // Load processed image\r\n          const processedImg = new Image()\r\n          processedImg.crossOrigin = \"anonymous\"\r\n\r\n          processedImg.onload = () => {\r\n            try {\r\n              const region = this.getRegionForCategory(category)\r\n\r\n              // Calculate scaling to fit the region\r\n              const scale = Math.min(region.width / processedImg.width, region.height / processedImg.height)\r\n\r\n              const scaledWidth = processedImg.width * scale\r\n              const scaledHeight = processedImg.height * scale\r\n\r\n              // Center the clothing in the region\r\n              const x = region.x + (region.width - scaledWidth) / 2\r\n              const y = region.y + (region.height - scaledHeight) / 2\r\n\r\n              // Draw clothing with proper blending\r\n              this.ctx.globalAlpha = 0.95\r\n              this.ctx.globalCompositeOperation = \"source-over\"\r\n              this.ctx.drawImage(processedImg, x, y, scaledWidth, scaledHeight)\r\n              this.ctx.globalAlpha = 1\r\n              this.ctx.globalCompositeOperation = \"source-over\"\r\n\r\n              // Store clothing layer info\r\n              this.clothingLayers.push({\r\n                category,\r\n                item,\r\n                x,\r\n                y,\r\n                width: scaledWidth,\r\n                height: scaledHeight,\r\n              })\r\n\r\n              console.log(`[FitLook] Applied ${category}: ${item.title}`)\r\n              resolve()\r\n            } catch (error) {\r\n              reject(error)\r\n            }\r\n          }\r\n\r\n          processedImg.onerror = () => {\r\n            reject(new Error(`Failed to load processed ${category} image`))\r\n          }\r\n\r\n          processedImg.src = processedImageUrl\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(`Failed to load ${category} image`))\r\n      }\r\n\r\n      img.src = item.image\r\n    })\r\n  }\r\n\r\n  // Get body region for clothing category\r\n  getRegionForCategory(category) {\r\n    const regions = this.bodyRegions\r\n\r\n    switch (category) {\r\n      case \"top\":\r\n        // Torso region for shirts, tops, jackets\r\n        return {\r\n          x: regions.torso.x,\r\n          y: regions.torso.y,\r\n          width: regions.torso.width,\r\n          height: regions.torso.height,\r\n        }\r\n      case \"bottom\":\r\n        // Legs and waist region for pants, jeans, skirts\r\n        return {\r\n          x: regions.legs.x,\r\n          y: regions.waist.y,\r\n          width: regions.legs.width,\r\n          height: regions.legs.height + regions.waist.height,\r\n        }\r\n      case \"shoes\":\r\n        // Feet region for shoes\r\n        return {\r\n          x: regions.feet.x,\r\n          y: regions.feet.y,\r\n          width: regions.feet.width,\r\n          height: regions.feet.height,\r\n        }\r\n      case \"accessory\":\r\n        // Wrist/arm area for accessories\r\n        return {\r\n          x: regions.torso.x + regions.torso.width * 0.65,\r\n          y: regions.torso.y + regions.torso.height * 0.75,\r\n          width: regions.torso.width * 0.3,\r\n          height: regions.torso.height * 0.25,\r\n        }\r\n      default:\r\n        return regions.torso\r\n    }\r\n  }\r\n\r\n  // Clear canvas and redraw base image\r\n  resetCanvas() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n    if (this.baseImage) {\r\n      this.ctx.drawImage(this.baseImage, 0, 0)\r\n    }\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Export canvas as image\r\n  exportOutfit() {\r\n    return this.canvas.toDataURL(\"image/png\")\r\n  }\r\n}\r\n\r\nexport default VirtualTryOnEngine\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
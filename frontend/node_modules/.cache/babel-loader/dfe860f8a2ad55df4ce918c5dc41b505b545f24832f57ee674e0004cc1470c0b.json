{"ast":null,"code":"class VirtualTryOnEngine {\n  constructor(canvas, userProfile) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.userProfile = userProfile;\n    this.baseImage = null;\n    this.baseImageData = null;\n    this.bodyRegions = null;\n    this.clothingLayers = [];\n  }\n\n  // Load base image and detect body regions\n  async loadBaseImage(imageUrl) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        // Set canvas size to match image\n        this.canvas.width = img.width;\n        this.canvas.height = img.height;\n\n        // Draw base image\n        this.ctx.drawImage(img, 0, 0);\n        this.baseImage = img;\n\n        // Store base image data for reference\n        this.baseImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n\n        // Detect body regions\n        this.detectBodyRegions();\n        console.log(\"[FitLook] Base image loaded and body regions detected\");\n        resolve();\n      };\n      img.onerror = () => {\n        reject(new Error(\"Failed to load base image\"));\n      };\n      img.src = imageUrl;\n    });\n  }\n\n  // Detect body regions based on image analysis\n  detectBodyRegions() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n\n    // Calculate body regions based on standard proportions\n    // These are approximate regions where clothing should be placed\n    this.bodyRegions = {\n      head: {\n        x: width * 0.25,\n        y: height * 0.05,\n        width: width * 0.5,\n        height: height * 0.15\n      },\n      torso: {\n        x: width * 0.2,\n        y: height * 0.2,\n        width: width * 0.6,\n        height: height * 0.35\n      },\n      waist: {\n        x: width * 0.15,\n        y: height * 0.5,\n        width: width * 0.7,\n        height: height * 0.05\n      },\n      legs: {\n        x: width * 0.2,\n        y: height * 0.55,\n        width: width * 0.6,\n        height: height * 0.3\n      },\n      feet: {\n        x: width * 0.25,\n        y: height * 0.85,\n        width: width * 0.5,\n        height: height * 0.15\n      }\n    };\n  }\n\n  // Apply clothing item to canvas with proper positioning\n  async applyClothing(item, category) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        try {\n          const region = this.getRegionForCategory(category);\n\n          // Calculate scaling to fit the region\n          const scale = Math.min(region.width / img.width, region.height / img.height);\n          const scaledWidth = img.width * scale;\n          const scaledHeight = img.height * scale;\n\n          // Center the clothing in the region\n          const x = region.x + (region.width - scaledWidth) / 2;\n          const y = region.y + (region.height - scaledHeight) / 2;\n\n          // Draw clothing with appropriate opacity\n          this.ctx.globalAlpha = 0.85;\n          this.ctx.drawImage(img, x, y, scaledWidth, scaledHeight);\n          this.ctx.globalAlpha = 1;\n\n          // Store clothing layer info\n          this.clothingLayers.push({\n            category,\n            item,\n            x,\n            y,\n            width: scaledWidth,\n            height: scaledHeight\n          });\n          console.log(`[FitLook] Applied ${category}: ${item.title}`);\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      };\n      img.onerror = () => {\n        reject(new Error(`Failed to load ${category} image`));\n      };\n      img.src = item.image;\n    });\n  }\n\n  // Get body region for clothing category\n  getRegionForCategory(category) {\n    const regions = this.bodyRegions;\n    switch (category) {\n      case \"top\":\n        return {\n          x: regions.torso.x,\n          y: regions.torso.y,\n          width: regions.torso.width,\n          height: regions.torso.height\n        };\n      case \"bottom\":\n        return {\n          x: regions.legs.x,\n          y: regions.waist.y,\n          width: regions.legs.width,\n          height: regions.legs.height + regions.waist.height\n        };\n      case \"shoes\":\n        return {\n          x: regions.feet.x,\n          y: regions.feet.y,\n          width: regions.feet.width,\n          height: regions.feet.height\n        };\n      case \"accessory\":\n        // Accessories can be placed on torso or wrist area\n        return {\n          x: regions.torso.x + regions.torso.width * 0.7,\n          y: regions.torso.y + regions.torso.height * 0.8,\n          width: regions.torso.width * 0.25,\n          height: regions.torso.height * 0.2\n        };\n      default:\n        return regions.torso;\n    }\n  }\n\n  // Clear canvas and redraw base image\n  resetCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.baseImage) {\n      this.ctx.drawImage(this.baseImage, 0, 0);\n    }\n    this.clothingLayers = [];\n  }\n\n  // Export canvas as image\n  exportOutfit() {\n    return this.canvas.toDataURL(\"image/png\");\n  }\n}\nexport default VirtualTryOnEngine;","map":{"version":3,"names":["VirtualTryOnEngine","constructor","canvas","userProfile","ctx","getContext","baseImage","baseImageData","bodyRegions","clothingLayers","loadBaseImage","imageUrl","Promise","resolve","reject","img","Image","crossOrigin","onload","width","height","drawImage","getImageData","detectBodyRegions","console","log","onerror","Error","src","head","x","y","torso","waist","legs","feet","applyClothing","item","category","region","getRegionForCategory","scale","Math","min","scaledWidth","scaledHeight","globalAlpha","push","title","error","image","regions","resetCanvas","clearRect","exportOutfit","toDataURL"],"sources":["C:/Users/abhig/Downloads/fitlook-app/frontend/src/utils/VirtualTryOnEngine.js"],"sourcesContent":["class VirtualTryOnEngine {\r\n  constructor(canvas, userProfile) {\r\n    this.canvas = canvas\r\n    this.ctx = canvas.getContext(\"2d\")\r\n    this.userProfile = userProfile\r\n    this.baseImage = null\r\n    this.baseImageData = null\r\n    this.bodyRegions = null\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Load base image and detect body regions\r\n  async loadBaseImage(imageUrl) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        // Set canvas size to match image\r\n        this.canvas.width = img.width\r\n        this.canvas.height = img.height\r\n\r\n        // Draw base image\r\n        this.ctx.drawImage(img, 0, 0)\r\n        this.baseImage = img\r\n\r\n        // Store base image data for reference\r\n        this.baseImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        // Detect body regions\r\n        this.detectBodyRegions()\r\n\r\n        console.log(\"[FitLook] Base image loaded and body regions detected\")\r\n        resolve()\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(\"Failed to load base image\"))\r\n      }\r\n\r\n      img.src = imageUrl\r\n    })\r\n  }\r\n\r\n  // Detect body regions based on image analysis\r\n  detectBodyRegions() {\r\n    const width = this.canvas.width\r\n    const height = this.canvas.height\r\n\r\n    // Calculate body regions based on standard proportions\r\n    // These are approximate regions where clothing should be placed\r\n    this.bodyRegions = {\r\n      head: {\r\n        x: width * 0.25,\r\n        y: height * 0.05,\r\n        width: width * 0.5,\r\n        height: height * 0.15,\r\n      },\r\n      torso: {\r\n        x: width * 0.2,\r\n        y: height * 0.2,\r\n        width: width * 0.6,\r\n        height: height * 0.35,\r\n      },\r\n      waist: {\r\n        x: width * 0.15,\r\n        y: height * 0.5,\r\n        width: width * 0.7,\r\n        height: height * 0.05,\r\n      },\r\n      legs: {\r\n        x: width * 0.2,\r\n        y: height * 0.55,\r\n        width: width * 0.6,\r\n        height: height * 0.3,\r\n      },\r\n      feet: {\r\n        x: width * 0.25,\r\n        y: height * 0.85,\r\n        width: width * 0.5,\r\n        height: height * 0.15,\r\n      },\r\n    }\r\n  }\r\n\r\n  // Apply clothing item to canvas with proper positioning\r\n  async applyClothing(item, category) {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image()\r\n      img.crossOrigin = \"anonymous\"\r\n\r\n      img.onload = () => {\r\n        try {\r\n          const region = this.getRegionForCategory(category)\r\n\r\n          // Calculate scaling to fit the region\r\n          const scale = Math.min(region.width / img.width, region.height / img.height)\r\n\r\n          const scaledWidth = img.width * scale\r\n          const scaledHeight = img.height * scale\r\n\r\n          // Center the clothing in the region\r\n          const x = region.x + (region.width - scaledWidth) / 2\r\n          const y = region.y + (region.height - scaledHeight) / 2\r\n\r\n          // Draw clothing with appropriate opacity\r\n          this.ctx.globalAlpha = 0.85\r\n          this.ctx.drawImage(img, x, y, scaledWidth, scaledHeight)\r\n          this.ctx.globalAlpha = 1\r\n\r\n          // Store clothing layer info\r\n          this.clothingLayers.push({\r\n            category,\r\n            item,\r\n            x,\r\n            y,\r\n            width: scaledWidth,\r\n            height: scaledHeight,\r\n          })\r\n\r\n          console.log(`[FitLook] Applied ${category}: ${item.title}`)\r\n          resolve()\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n\r\n      img.onerror = () => {\r\n        reject(new Error(`Failed to load ${category} image`))\r\n      }\r\n\r\n      img.src = item.image\r\n    })\r\n  }\r\n\r\n  // Get body region for clothing category\r\n  getRegionForCategory(category) {\r\n    const regions = this.bodyRegions\r\n\r\n    switch (category) {\r\n      case \"top\":\r\n        return {\r\n          x: regions.torso.x,\r\n          y: regions.torso.y,\r\n          width: regions.torso.width,\r\n          height: regions.torso.height,\r\n        }\r\n      case \"bottom\":\r\n        return {\r\n          x: regions.legs.x,\r\n          y: regions.waist.y,\r\n          width: regions.legs.width,\r\n          height: regions.legs.height + regions.waist.height,\r\n        }\r\n      case \"shoes\":\r\n        return {\r\n          x: regions.feet.x,\r\n          y: regions.feet.y,\r\n          width: regions.feet.width,\r\n          height: regions.feet.height,\r\n        }\r\n      case \"accessory\":\r\n        // Accessories can be placed on torso or wrist area\r\n        return {\r\n          x: regions.torso.x + regions.torso.width * 0.7,\r\n          y: regions.torso.y + regions.torso.height * 0.8,\r\n          width: regions.torso.width * 0.25,\r\n          height: regions.torso.height * 0.2,\r\n        }\r\n      default:\r\n        return regions.torso\r\n    }\r\n  }\r\n\r\n  // Clear canvas and redraw base image\r\n  resetCanvas() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n    if (this.baseImage) {\r\n      this.ctx.drawImage(this.baseImage, 0, 0)\r\n    }\r\n    this.clothingLayers = []\r\n  }\r\n\r\n  // Export canvas as image\r\n  exportOutfit() {\r\n    return this.canvas.toDataURL(\"image/png\")\r\n  }\r\n}\r\n\r\nexport default VirtualTryOnEngine\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
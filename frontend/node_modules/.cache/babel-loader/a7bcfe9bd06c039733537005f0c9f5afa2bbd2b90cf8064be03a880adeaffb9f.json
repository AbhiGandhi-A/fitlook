{"ast":null,"code":"// Admin API routes - manage discounts, rules, and product categories\nimport express from \"express\";\nimport DiscountRule from \"../models/DiscountRule.js\";\nimport ProductCategory from \"../models/ProductCategory.js\";\nconst router = express.Router();\n\n// Middleware: Simple admin authentication (in production, use JWT)\nconst adminAuth = (req, res, next) => {\n  const {\n    adminPassword\n  } = req.headers;\n  if (adminPassword !== process.env.ADMIN_PASSWORD) {\n    return res.status(401).json({\n      error: \"Unauthorized\"\n    });\n  }\n  next();\n};\n\n// POST: Create discount rule\nrouter.post(\"/discount-rules\", adminAuth, async (req, res) => {\n  try {\n    const {\n      name,\n      description,\n      discountPercentage,\n      requiredItems,\n      styleMatching\n    } = req.body;\n    const rule = new DiscountRule({\n      name,\n      description,\n      discountPercentage,\n      requiredItems,\n      styleMatching\n    });\n    await rule.save();\n    res.json({\n      success: true,\n      rule\n    });\n  } catch (error) {\n    console.error(\"Error creating discount rule:\", error);\n    res.status(500).json({\n      error: \"Failed to create discount rule\"\n    });\n  }\n});\n\n// GET: Get all discount rules\nrouter.get(\"/discount-rules\", adminAuth, async (req, res) => {\n  try {\n    const rules = await DiscountRule.find();\n    res.json(rules);\n  } catch (error) {\n    console.error(\"Error fetching discount rules:\", error);\n    res.status(500).json({\n      error: \"Failed to fetch discount rules\"\n    });\n  }\n});\n\n// PUT: Update discount rule\nrouter.put(\"/discount-rules/:ruleId\", adminAuth, async (req, res) => {\n  try {\n    const rule = await DiscountRule.findByIdAndUpdate(req.params.ruleId, req.body, {\n      new: true\n    });\n    res.json({\n      success: true,\n      rule\n    });\n  } catch (error) {\n    console.error(\"Error updating discount rule:\", error);\n    res.status(500).json({\n      error: \"Failed to update discount rule\"\n    });\n  }\n});\n\n// DELETE: Delete discount rule\nrouter.delete(\"/discount-rules/:ruleId\", adminAuth, async (req, res) => {\n  try {\n    await DiscountRule.findByIdAndDelete(req.params.ruleId);\n    res.json({\n      success: true\n    });\n  } catch (error) {\n    console.error(\"Error deleting discount rule:\", error);\n    res.status(500).json({\n      error: \"Failed to delete discount rule\"\n    });\n  }\n});\n\n// POST: Categorize product\nrouter.post(\"/categorize-product\", adminAuth, async (req, res) => {\n  try {\n    const {\n      shopifyProductId,\n      title,\n      price,\n      image,\n      category,\n      style,\n      color,\n      complementaryCategories\n    } = req.body;\n    let product = await ProductCategory.findOne({\n      shopifyProductId\n    });\n    if (!product) {\n      product = new ProductCategory({\n        shopifyProductId,\n        title,\n        price,\n        image,\n        category,\n        style,\n        color,\n        complementaryCategories\n      });\n    } else {\n      product.category = category;\n      product.style = style;\n      product.color = color;\n      product.complementaryCategories = complementaryCategories;\n    }\n    await product.save();\n    res.json({\n      success: true,\n      product\n    });\n  } catch (error) {\n    console.error(\"Error categorizing product:\", error);\n    res.status(500).json({\n      error: \"Failed to categorize product\"\n    });\n  }\n});\n\n// GET: Get all categorized products\nrouter.get(\"/products\", adminAuth, async (req, res) => {\n  try {\n    const products = await ProductCategory.find();\n    res.json(products);\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    res.status(500).json({\n      error: \"Failed to fetch products\"\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["express","DiscountRule","ProductCategory","router","Router","adminAuth","req","res","next","adminPassword","headers","process","env","ADMIN_PASSWORD","status","json","error","post","name","description","discountPercentage","requiredItems","styleMatching","body","rule","save","success","console","get","rules","find","put","findByIdAndUpdate","params","ruleId","new","delete","findByIdAndDelete","shopifyProductId","title","price","image","category","style","color","complementaryCategories","product","findOne","products"],"sources":["C:/Users/abhig/Downloads/fitlook-app/frontend/src/components/AdminPanel.jsx"],"sourcesContent":["// Admin API routes - manage discounts, rules, and product categories\nimport express from \"express\"\nimport DiscountRule from \"../models/DiscountRule.js\"\nimport ProductCategory from \"../models/ProductCategory.js\"\n\nconst router = express.Router()\n\n// Middleware: Simple admin authentication (in production, use JWT)\nconst adminAuth = (req, res, next) => {\n  const { adminPassword } = req.headers\n  if (adminPassword !== process.env.ADMIN_PASSWORD) {\n    return res.status(401).json({ error: \"Unauthorized\" })\n  }\n  next()\n}\n\n// POST: Create discount rule\nrouter.post(\"/discount-rules\", adminAuth, async (req, res) => {\n  try {\n    const { name, description, discountPercentage, requiredItems, styleMatching } = req.body\n\n    const rule = new DiscountRule({\n      name,\n      description,\n      discountPercentage,\n      requiredItems,\n      styleMatching,\n    })\n\n    await rule.save()\n    res.json({ success: true, rule })\n  } catch (error) {\n    console.error(\"Error creating discount rule:\", error)\n    res.status(500).json({ error: \"Failed to create discount rule\" })\n  }\n})\n\n// GET: Get all discount rules\nrouter.get(\"/discount-rules\", adminAuth, async (req, res) => {\n  try {\n    const rules = await DiscountRule.find()\n    res.json(rules)\n  } catch (error) {\n    console.error(\"Error fetching discount rules:\", error)\n    res.status(500).json({ error: \"Failed to fetch discount rules\" })\n  }\n})\n\n// PUT: Update discount rule\nrouter.put(\"/discount-rules/:ruleId\", adminAuth, async (req, res) => {\n  try {\n    const rule = await DiscountRule.findByIdAndUpdate(req.params.ruleId, req.body, { new: true })\n    res.json({ success: true, rule })\n  } catch (error) {\n    console.error(\"Error updating discount rule:\", error)\n    res.status(500).json({ error: \"Failed to update discount rule\" })\n  }\n})\n\n// DELETE: Delete discount rule\nrouter.delete(\"/discount-rules/:ruleId\", adminAuth, async (req, res) => {\n  try {\n    await DiscountRule.findByIdAndDelete(req.params.ruleId)\n    res.json({ success: true })\n  } catch (error) {\n    console.error(\"Error deleting discount rule:\", error)\n    res.status(500).json({ error: \"Failed to delete discount rule\" })\n  }\n})\n\n// POST: Categorize product\nrouter.post(\"/categorize-product\", adminAuth, async (req, res) => {\n  try {\n    const { shopifyProductId, title, price, image, category, style, color, complementaryCategories } = req.body\n\n    let product = await ProductCategory.findOne({ shopifyProductId })\n\n    if (!product) {\n      product = new ProductCategory({\n        shopifyProductId,\n        title,\n        price,\n        image,\n        category,\n        style,\n        color,\n        complementaryCategories,\n      })\n    } else {\n      product.category = category\n      product.style = style\n      product.color = color\n      product.complementaryCategories = complementaryCategories\n    }\n\n    await product.save()\n    res.json({ success: true, product })\n  } catch (error) {\n    console.error(\"Error categorizing product:\", error)\n    res.status(500).json({ error: \"Failed to categorize product\" })\n  }\n})\n\n// GET: Get all categorized products\nrouter.get(\"/products\", adminAuth, async (req, res) => {\n  try {\n    const products = await ProductCategory.find()\n    res.json(products)\n  } catch (error) {\n    console.error(\"Error fetching products:\", error)\n    res.status(500).json({ error: \"Failed to fetch products\" })\n  }\n})\n\nexport default router\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}